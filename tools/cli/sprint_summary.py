#!/usr/bin/env python3
"""
Sprint Summary Generator for Bluelabel Agent OS

Usage:
  bluelabel sprint-summary --sprint 6.10 [--output /docs/releases/SPRINT_6.10_SUMMARY.md]

Generates a summary report for a completed sprint, including:
- Phase header
- List of completed tasks with owners and branches
- Any flagged edge cases
- Links to postmortem, checklist, scorecard, and tag
- Data pulled from /TASK_CARDS.md (and optionally SPRINT_HISTORY.md, outboxes)
- Output written to /docs/releases/SPRINT_<sprint>_SUMMARY.md
"""
import argparse
import re
from pathlib import Path
import sys

TASK_CARDS_PATH = Path('TASK_CARDS.md')
RELEASES_DIR = Path('docs/releases')

POSTMORTEM_LINK = '/docs/release_notes/PHASE_6.9_POSTMORTEM.md'
CHECKLIST_LINK = '/WA_CHECKLIST.md'
SCORECARD_LINK = '/docs/system/AGENT_SCORECARD.md'
TAG_PREFIX = 'v0.6.'


def parse_task_cards(sprint: str):
    """Parse TASK_CARDS.md for completed tasks in the given sprint/phase."""
    tasks = []
    phase_header = None
    with open(TASK_CARDS_PATH) as f:
        lines = f.readlines()
    # Find phase header
    phase_pattern = re.compile(rf"Phase[\s\-:]*{re.escape(sprint)}", re.IGNORECASE)
    for i, line in enumerate(lines):
        if phase_pattern.search(line):
            phase_header = line.strip()
            break
    # Find completed tasks after the phase header
    in_completed = False
    for line in lines:
        if line.strip().startswith('## Completed Tasks'):
            in_completed = True
        if in_completed and line.strip().startswith('### TASK-'):
            task_id = line.strip().split()[1].replace(':', '')
            owner = None
            branch = None
            desc = None
            # Look ahead for owner, branch, and description
            for j in range(1, 10):
                if i + j >= len(lines):
                    break
                l2 = lines[i + j]
                if l2.strip().startswith('**Owner**:'):
                    owner = l2.split(':', 1)[1].strip()
                if l2.strip().startswith('**Branch**:') or l2.strip().startswith('**Branch**'):
                    branch = l2.split(':', 1)[1].strip()
                if l2.strip().startswith('**Description**:'):
                    desc = l2.split(':', 1)[1].strip()
                if l2.strip().startswith('### TASK-'):
                    break
            tasks.append({'id': task_id, 'owner': owner, 'branch': branch, 'desc': desc})
    return phase_header, tasks

def generate_summary(sprint: str, output_path: Path):
    phase_header, tasks = parse_task_cards(sprint)
    with open(output_path, 'w') as f:
        f.write(f"# Sprint {sprint} Summary\n\n")
        if phase_header:
            f.write(f"## {phase_header}\n\n")
        f.write("### Completed Tasks\n\n")
        for t in tasks:
            f.write(f"- **{t['id']}**: {t['desc']}\n  - Owner: {t['owner']}\n  - Branch: {t['branch']}\n\n")
        f.write("---\n\n")
        f.write("### Key Links\n\n")
        f.write(f"- [Postmortem]({POSTMORTEM_LINK})\n")
        f.write(f"- [WA Checklist]({CHECKLIST_LINK})\n")
        f.write(f"- [Agent Scorecard]({SCORECARD_LINK})\n")
        f.write(f"- [Tag]({TAG_PREFIX}{sprint.split('.')[-1]})\n\n")
        f.write("---\n\n")
        f.write("*Generated by bluelabel sprint-summary.*\n")
    print(f"Sprint summary written to {output_path}")

def main():
    parser = argparse.ArgumentParser(description='Generate a summary report for a completed sprint.')
    parser.add_argument('--sprint', required=True, help='Sprint or phase identifier (e.g., 6.10)')
    parser.add_argument('--output', type=Path, default=None, help='Output file (default: /docs/releases/SPRINT_<sprint>_SUMMARY.md)')
    args = parser.parse_args()
    output_path = args.output or RELEASES_DIR / f'SPRINT_{args.sprint}_SUMMARY.md'
    output_path.parent.mkdir(parents=True, exist_ok=True)
    generate_summary(args.sprint, output_path)

if __name__ == '__main__':
    main() 